{"name":"Graphene","tagline":"A thin layer of graphic data types","body":"# Graphene\r\n###  A thin layer of types for graphic libraries\r\n\r\nWhen creating graphic libraries you most likely end up dealing with points\r\nand rectangles. If you're particularly unlucky, you may end up dealing\r\nwith affine matrices and 2D transformations. If you're writing a graphic\r\nlibrary with 3D transformations, though, you are going to hit the jackpot:\r\n4x4 matrices, projections, transformations, vectors, and quaternions.\r\n\r\nMost of this stuff exists, in various forms, in other libraries, but it\r\nhas the major drawback of coming along with the rest of those libraries,\r\nwhich may or may not be what you want. Those libraries are also available\r\nin various languages, as long as those languages are C++; again, it may or\r\nmay not be something you want.\r\n\r\nFor this reason, I decided to write the thinnest, smallest possible layer\r\nneeded to write a canvas library; given its relative size, and the\r\npropensity for graphics libraries to have a pun in their name, I decided\r\nto call it Graphene.\r\n\r\nThis library provides types and their relative API; it does not deal with\r\nwindowing system surfaces, drawing, scene graphs, or input. You're\r\nsupposed to do that yourself, in your own canvas implementation, which is\r\nthe whole point of writing the library in the first place.\r\n\r\n### Dependencies\r\n\r\nGraphene has little dependencies.\r\n\r\nGraphene contains optimizations for speeding up vector operations; those\r\noptimizations are optional, and used only if both Graphene was compiled\r\nwith support for them *and* if the system you're running on has them.\r\nCurrently, Graphene supports the following platform-specific fast paths:\r\n\r\n * Streaming SIMD Extensions (SSE) 2\r\n * ARM NEON\r\n * GCC vector extensions\r\n\r\nIn the remote case in which none of these optimizations are available,\r\nGraphene will fall back to a naive scalar implementation.\r\n\r\nGraphene can, optionally, provide types for integrating with GObject\r\nproperties and signals, as well as introspection information for its\r\nuse with other languages through introspection-based bindings.\r\n\r\n### Installation\r\n\r\nIn order to build and install Graphene you will need development tools and\r\nthe headers of the dependencies.\r\n\r\nFirst of all, clone the Git repository:\r\n\r\n    $ git clone git://github.com/ebassi/graphene\r\n    $ cd graphene\r\n\r\nThen run:\r\n\r\n    $ ./autogen.sh\r\n    $ make\r\n    $ make check\r\n    # make install\r\n\r\n### Contributing\r\n\r\nIf you found a bug (which I'm sure there will be plenty), or if you want\r\nto add your own pet feature, then follow these steps:\r\n\r\n 1. Fork the [ebassi/graphene](https://github.com/ebassi/graphene) repo\r\n 2. Fix bugs or add new features and push them to your clone\r\n 3. Open [a new issue](https://github.com/ebassi/graphene/issues/new)\r\n 4. Open [a pull request](https://github.com/ebassi/graphene/pulls)\r\n 5. Wait for me to give feedback on the pull request\r\n 6. Celebrate when your code gets merged\r\n\r\nThat's pretty much it.\r\n\r\nPlease, respect [the coding style](https://github.com/ebassi/graphene/blob/master/doc/CODING_STYLE.md) when writing patches for Graphene.\r\n\r\n## Documentation\r\n\r\n### Available types\r\n\r\nGraphene provides common types needed to handle 3D transformations:\r\n\r\n * 2D points\r\n * 3D points\r\n * triangles\r\n * rectangles\r\n * quads\r\n * quaternions\r\n * euler angles\r\n * vectors (2, 3, or 4-sized)\r\n * matrices\r\n * planes\r\n * 3D boxes\r\n * spheres\r\n * frustums\r\n\r\nGraphene also provides its low-level SIMD vector and matrix types, which are\r\nused to implement the API above.\r\n\r\nAll types can be placed on the stack, but provide allocation/free functions\r\nfor working on the heap as well. The contents of all structure types, unless\r\nnoted otherwise, should be considered private, and should never be accessed\r\ndirectly.\r\n\r\nThe full API reference for the for Graphene is [available online](https://people.gnome.org/~ebassi/docs/graphene/)\r\n\r\n### License\r\n\r\nGraphene is released under the terms of the MIT/X11 license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}